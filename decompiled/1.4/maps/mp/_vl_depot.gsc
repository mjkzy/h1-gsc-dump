// H1 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_depot()
{
    setdynamicdvar( "vlDepotState", "" );
    level.depotscenes = [];
    level.depotscenes[level.depotscenes.size] = "knife";
    level.depotscenes[level.depotscenes.size] = "pistol";
    level.depotscenes[level.depotscenes.size] = "laptop";
    level.depotscenes[level.depotscenes.size] = "smoking";
    level.depotscenes[level.depotscenes.size] = "lackey";
    level.depotstates = [];
    depotaddstate( "pause", "idle", "idle", ::depotcanswitchtopause, ::depotswitchingtopause, ::depotpauseended );
    depotaddstate( "greeting", "greeting", "greeting", ::depotcanswitchtogreeting, ::depotswitchingtogreeting, ::depotgreetingended );
    depotaddstate( "idle", "idle", "idle", ::depotcanswitchtoidle, ::depotswitchingtoidle, ::depotidleended, ::depotidleinit );
    depotaddstate( "fidget", "fidget", "fidget", ::depotcanswitchtofidget, ::depotswitchingtofidget, ::depotfidgetended, ::depotfidgetinit );
    depotaddstate( "nag", "nag", "nag", ::depotcanswitchtonag, ::depotswitchingtonag, ::depotnagended, ::depotnaginit );
    depotaddstate( "xover", "xover", "xover", ::depotcanswitchtoxover, ::depotswitchingtoxover, ::depotxoverended, ::depotxoverinit );
    depotaddstate( "broke", "broke", "broke", ::depotcanswitchtobroke, ::depotswitchingtobroke, ::depotbrokeended, ::depotbrokeinit );
    depotaddstate( "creditreminder", "credit_reminder", "creditreminder", ::depotcanswitchtocreditreminder, ::depotswitchingtocreditreminder, ::depotcreditreminderended, ::depotcreditreminderinit );
    depotaddstate( "newproduct", "new_product", "newproduct", ::depotcanswitchtonewproduct, ::depotswitchingtonewproduct, ::depotnewproductended );
    depotaddstate( "easteregg", "easter_egg", "easteregg", ::depotcanswitchtoeasteregg, ::depotswitchingtoeasteregg, ::depoteastereggended, ::depoteasteregginit );
    depotaddstate( "purchase", "purchase", "purchase", ::depotcanswitchtopurchase, ::depotswitchingtopurchase, ::depotpurchaseended, ::depotpurchaseinit );
    depotaddstate( "purchasewait", "idle", "idle", ::depotcanswitchtopurchasewait, ::depotswitchingtopurchasewait, ::depotpurchasewaitended );
    depotaddstate( "purchaseconfirm", "idle", "idle", ::depotcanswitchtopurchaseconfirm, ::depotswitchingtopurchaseconfirm, ::depotpurchaseconfirmended );
    level.depotbrokeattempts = 0;
    level.depoteastereggthreshhold = 50;
}

depotaddstate( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( !isdefined( level.depotstates[var_0] ) )
        level.depotstates[var_0] = spawnstruct();

    level.depotstates[var_0].animname = var_1;
    level.depotstates[var_0].animlabel = var_2;
    level.depotstates[var_0].canswitchtostatefunc = var_3;
    level.depotstates[var_0].switchingtostatefunc = var_4;
    level.depotstates[var_0].stateendedfunc = var_5;
    level.depotstates[var_0].stateinitfunc = var_6;
}

hasvisiteddepot()
{
    var_0 = getcacplayerdataforgroup( level.depotcontroller, common_scripts\utility::getstatsgroup_common(), "hasEverVisitedDepot" );
    return var_0;
}

sethasvisiteddepot()
{
    self setplayerdata( common_scripts\utility::getstatsgroup_common(), "hasEverVisitedDepot", 1 );
}

hascrossoverloot()
{
    return getdvarint( "vlDepotHaveCrossover", 0 );
}

hasnewproduct()
{
    return getdvarint( "vlDepotHasNewProduct", 0 );
}

sethasnewproduct()
{
    setdynamicdvar( "vlDepotHasNewProduct", 0 );
}

playerenterdepot( var_0 )
{
    self endon( "leave_depot" );
    setdvar( "vlDepotEnabled", 1 );

    if ( !maps\mp\_utility::is_true( level.in_depot ) )
    {
        while ( !getdvarint( "vlDepotLoaded", 0 ) || !getdvarint( "virtualLobbyPresentable" ) )
            wait 0.05;

        level.depotcontroller = var_0;
        var_1 = self;

        if ( !maps\mp\_utility::is_true( level.depotinitialized ) )
        {
            var_1 thread maps\mp\_vl_base::playerreloadallavatarmodels();
            var_1 spawnandinitdepotents();
            level.depotinitialized = 1;
        }

        foreach ( var_3 in level.depotstates )
        {
            if ( isdefined( var_3.stateinitfunc ) )
                self [[ var_3.stateinitfunc ]]();
        }

        var_5 = level.camparams.camera;
        var_5.depotpos = "dealer";
        var_5.depotsceneent scriptmodelplayanimdeltamotionfrompos( "h1_vlobby_armory_scene1_cam_idle", var_5.depotsceneent.scriptednode.origin, var_5.depotsceneent.scriptednode.angles, "scene_node_anim" );

        if ( hasvisiteddepot() )
            level.depotscene = level.depotscenes[randomint( level.depotscenes.size )];
        else
            level.depotscene = level.depotscenes[0];

        level.in_depot = 1;
        setdynamicdvar( "vlDepotState", "greeting" );
        thread depotanimstatemachine();

        if ( level.depotscene != "lackey" )
            thread depotlackeyfidgets();

        maps\mp\_vl_base::playerchangecameramode( "depot", 1 );
        maps\mp\_vl_base::playersetfovscale( 1.0 );
        self disablephysicaldepthoffieldscripting();
    }
}

playerleavedepot( var_0 )
{
    setdvar( "vlDepotEnabled", 0 );
    level.in_depot = 0;
    maps\mp\_vl_base::playersetlobbyfovscale();
    maps\mp\_vl_base::playerpopcameramode();
    self enablephysicaldepthoffieldscripting();
    self notify( "leave_depot" );
}

spawnandinitdepotents()
{
    var_0 = level.camparams.camera;

    if ( isdefined( var_0.depotsceneent ) )
        return;

    while ( !isdefined( common_scripts\utility::getstruct( "characterBM", "targetname" ) ) )
        wait 0.05;

    var_1 = common_scripts\utility::getstruct( "characterBM", "targetname" );
    var_0.depotsceneent = spawn( "script_model", var_1.origin );
    var_0.depotsceneent setmodel( "genericprop" );
    var_0.depotsceneent.scriptednode = var_1;
    level.depotagent = playerspawndepotcharacter( self.class, "vldepot_dealer_animclass", "body_graves_mp", "head_graves_lob" );
    level.depotagent.depotsceneent = spawn( "script_model", var_1.origin );
    level.depotagent.depotsceneent setmodel( "genericprop_x10" );
    level.depotagent.depotsceneent.scriptednode = var_1;
    level.depotagent scragentsynchronizeanims( 0, 0, level.depotagent.depotsceneent, "j_prop_1", "tag_origin" );
    level.depotagent.pistol = getent( "depot_pistol", "targetname" );
    level.depotagent.pistol linktosynchronizedparent( level.depotagent.depotsceneent, "j_prop_2", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotagent.knife = getent( "depot_knife", "targetname" );
    level.depotagent.knife linktosynchronizedparent( level.depotagent.depotsceneent, "j_prop_3", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotagent.chair = getent( "depot_chair", "targetname" );
    level.depotagent.chair linktosynchronizedparent( level.depotagent.depotsceneent, "j_prop_4", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotagent.cig = spawn( "script_model", var_1.origin );
    level.depotagent.cig setmodel( "h1_prop_cigarette_animated" );
    level.depotagent.cig linktosynchronizedparent( level.depotagent.depotsceneent, "j_prop_5", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotagent.phone = spawn( "script_model", var_1.origin );
    level.depotagent.phone setmodel( "h1_mwr_com_cellphone_on" );
    level.depotagent.phone linktosynchronizedparent( level.depotagent.depotsceneent, "j_prop_6", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotagent.ashtray = spawn( "script_model", var_1.origin );
    level.depotagent.ashtray setmodel( "btr_ashtray_metal_01" );
    level.depotagent.ashtray linktosynchronizedparent( level.depotagent.depotsceneent, "j_prop_7", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotagent.whetstone = spawn( "script_model", var_1.origin );
    level.depotagent.whetstone setmodel( "h1_mwr_com_cellphone_on" );
    level.depotagent.whetstone linktosynchronizedparent( level.depotagent.depotsceneent, "j_prop_8", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotagent.laptop = getent( "depot_laptop", "targetname" );
    level.depotagent.laptop setmodel( "h1_laptop_01_rig" );
    level.depotagent.laptop linktosynchronizedparent( level.depotagent.depotsceneent, "j_prop_9", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotlackey = playerspawndepotcharacter( self.class, "vldepot_lackey_animclass", "janitor_body", "janitor_head_z" );
    level.depotlackey.sceneent = spawn( "script_model", var_1.origin );
    level.depotlackey.sceneent setmodel( "genericprop_x10" );
    level.depotlackey.sceneent.scriptednode = var_1;
    level.depotlackey scragentsynchronizeanims( 0, 0, level.depotlackey.sceneent, "j_prop_10", "tag_origin" );
    level.depotlackey.toolbox = spawn( "script_model", var_1.origin );
    level.depotlackey.toolbox setmodel( "com_red_toolbox" );
    level.depotlackey.toolbox linktosynchronizedparent( level.depotlackey.sceneent, "j_prop_1", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotlackey.toolbox hide();
    level.depotlackey.crate = spawn( "script_model", var_1.origin );
    level.depotlackey.crate setmodel( "ch_crate48x64" );
    level.depotlackey.crate linktosynchronizedparent( level.depotlackey.sceneent, "j_prop_5", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotlackey.crate hide();
    level.depotlackey.ammo = spawn( "script_model", var_1.origin );
    level.depotlackey.ammo setmodel( "h1_fng_shell_ammo_crate" );
    level.depotlackey.ammo linktosynchronizedparent( level.depotlackey.sceneent, "j_prop_6", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotlackey.ammo hide();
    level.depotlackey.plasticcase = spawn( "script_model", var_1.origin );
    level.depotlackey.plasticcase setmodel( "com_plasticcase_beige_big" );
    level.depotlackey.plasticcase linktosynchronizedparent( level.depotlackey.sceneent, "j_prop_7", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotlackey.plasticcase hide();
    level.depotlackey.clipboard = spawn( "script_model", var_1.origin );
    level.depotlackey.clipboard setmodel( "com_clipboard_wpaper" );
    level.depotlackey.clipboard linktosynchronizedparent( level.depotlackey.sceneent, "j_prop_7", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    level.depotlackey.clipboard hide();
    level.depotlackey.scenemodels = [];
    level.depotlackey.scenemodels[0] = level.depotlackey.crate;
    level.depotlackey.scenemodels[1] = level.depotlackey.clipboard;
    level.depotlackey.scenemodels[2] = level.depotlackey.clipboard;
    level.depotlackey.scenemodels[3] = level.depotlackey.ammo;
    level.depotlackey.scenemodels[4] = level.depotlackey.plasticcase;
    level.depotlackey.scenemodels[5] = level.depotlackey.toolbox;
    level.depotlackey.scenemodels[6] = level.depotlackey.clipboard;
    level.depotprop = playerspawndepotcharacter( self.class, "vldepot_props_animclass", "janitor_body", "janitor_head_z", 0 );
}

playerspawndepotcharacter( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_4 ) )
        var_4 = 1;

    var_5 = maps\mp\gametypes\_class::getloadout( self.pers["team"], var_0 );
    var_6 = common_scripts\utility::getstruct( "characterBM", "targetname" );
    var_7 = maps\mp\_vl_avatar::spawn_an_avatar( self, var_6, var_5.primaryname, self.sessioncostume, var_5._id_A7ED, undefined, undefined, var_4, 1, var_2, var_3 );
    var_7._id_A7EA = var_5.emblemindex;
    var_7 _meth_8577( var_5._id_A7EC );
    var_7 setanimclass( var_1 );
    var_7 scragentsetscripted( 1 );
    var_7 scragentsetphysicsmode( "noclip" );
    maps\mp\_vl_avatar::hide_avatar_primary_weapon( var_7 );
    return var_7;
}

depotdelaysetstate( var_0, var_1 )
{
    level endon( "depot_state_changed" );
    wait( var_1 );
    setdynamicdvar( "vlDepotState", var_0 );
}

depotidleinit()
{
    level.depotstates["idle"].statemintime = 10000;
    level.depotstates["idle"].statemaxtime = 15000;
    level.depotstates["idle"].laststatetime = gettime();
    level.depotstates["idle"].idletype = 1;
}

depotfidgetinit()
{
    level.depotstates["fidget"].idletype = 1;
}

depotnaginit()
{
    level.depotstates["nag"].statemintime = 90000;
    level.depotstates["nag"].statemaxtime = 120000;
    level.depotstates["nag"].laststatetime = gettime();
    level.depotstates["nag"].minidletime = level.depotstates["nag"].statemintime;
    level.depotstates["nag"].idletype = 1;
}

depotxoverinit()
{
    level.depotstates["xover"].statemintime = 60000;
    level.depotstates["xover"].statemaxtime = 90000;
    level.depotstates["xover"].laststatetime = gettime();
    level.depotstates["xover"].idletype = 1;
}

depotbrokeinit()
{
    level.depotstates["broke"].statemintime = 20000;
    level.depotstates["broke"].statemaxtime = 40000;
    level.depotstates["broke"].laststatetime = gettime() - level.depotstates["broke"].statemaxtime;
    level.depotstates["broke"].idletype = 1;
}

depotcreditreminderinit()
{
    level.depotstates["creditreminder"].statemintime = 60000;
    level.depotstates["creditreminder"].statemaxtime = 90000;
    level.depotstates["creditreminder"].laststatetime = gettime();
    level.depotstates["creditreminder"].idletype = 1;
}

depoteasteregginit()
{
    level.depotstates["easteregg"].statemintime = 120000;
    level.depotstates["easteregg"].statemaxtime = 240000;
    level.depotstates["easteregg"].laststatetime = gettime() - level.depotstates["easteregg"].statemaxtime;
    level.depotstates["easteregg"].idletype = 1;
}

depotpurchaseinit()
{
    if ( isdefined( level.depotstates["purchase"].animname ) )
        level.depotstates["purchase"].origanimname = level.depotstates["purchase"].animname;
}

depotcanswitchtopause( var_0 )
{
    return 1;
}

depotcanswitchtogreeting( var_0 )
{
    if ( var_0 == "" )
        return 1;

    if ( var_0 == "greeting" && ( !hasvisiteddepot() || hascrossoverloot() && level.depotstates["greeting"].animname != "greeting_xover" ) )
        return 1;

    return 0;
}

depotcanswitchtoidle( var_0 )
{
    return 1;
}

depotcanswitchtofidget( var_0 )
{
    if ( var_0 == "idle" )
        return 1;

    return 0;
}

depotcanswitchtonag( var_0 )
{
    if ( var_0 == "idle" && isdefined( level.depotidlestarttime ) && gettime() - level.depotidlestarttime > level.depotstates["nag"].minidletime && gettime() - level.depotstates["nag"].laststatetime > randomfloatrange( level.depotstates["nag"].statemintime, level.depotstates["nag"].statemaxtime ) )
        return 1;

    return 0;
}

depotcanswitchtoxover( var_0 )
{
    if ( var_0 == "idle" && gettime() - level.depotstates["xover"].laststatetime > randomfloatrange( level.depotstates["xover"].statemintime, level.depotstates["xover"].statemaxtime ) )
        return 1;

    return 0;
}

depotcanswitchtobroke( var_0 )
{
    level.depotbrokeattempts = level.depotbrokeattempts + 1;

    if ( level.depotbrokeattempts > level.depoteastereggthreshhold )
        thread depotdelaysetstate( "easteregg", 0.05 );

    if ( var_0 == "idle" && gettime() - level.depotstates["broke"].laststatetime > randomfloatrange( level.depotstates["broke"].statemintime, level.depotstates["broke"].statemaxtime ) )
        return 1;

    return 0;
}

depotcanswitchtocreditreminder( var_0 )
{
    if ( var_0 == "idle" && gettime() - level.depotstates["creditreminder"].laststatetime > randomfloatrange( level.depotstates["creditreminder"].statemintime, level.depotstates["creditreminder"].statemaxtime ) )
        return 1;

    return 0;
}

depotcanswitchtonewproduct( var_0 )
{
    if ( var_0 == "greeting" && hasnewproduct() )
        return 1;

    return 0;
}

depotcanswitchtoeasteregg( var_0 )
{
    if ( var_0 == "idle" && gettime() - level.depotstates["easteregg"].laststatetime > randomfloatrange( level.depotstates["easteregg"].statemintime, level.depotstates["easteregg"].statemaxtime ) )
        return 1;

    return 0;
}

depotcanswitchtopurchase( var_0 )
{
    if ( var_0 != "purchasewait" && var_0 != "purchaseconfirm" )
        return 1;

    return 0;
}

depotcanswitchtopurchasewait( var_0 )
{
    if ( var_0 == "purchase" )
        return 1;

    return 0;
}

depotcanswitchtopurchaseconfirm( var_0 )
{
    if ( var_0 == "purchase" || var_0 == "purchasewait" )
        return 1;

    return 0;
}

depotswitchingtopause( var_0 )
{

}

depotswitchingtogreeting( var_0 )
{
    var_1 = level.depotstates["greeting"].animname;
    level.depotstates["greeting"].animname = "greeting";

    if ( !hasvisiteddepot() )
    {
        if ( var_0 == "" )
            level.depotstates["greeting"].animname = "greeting_idle";
        else
        {
            if ( level.depotstatefinished )
                level.depotstates["greeting"].animname = "greeting_first";
            else
                level.depotstates["greeting"].animname = "greeting_skip";

            sethasvisiteddepot();
        }
    }
    else if ( hascrossoverloot() )
        level.depotstates["greeting"].animname = "greeting_xover";

    thread agentdelayplaysound();
}

depotswitchingtoidle( var_0 )
{
    if ( level.camparams.camera.depotpos != "dealer" )
        thread playertransitiontodealer();

    if ( isdefined( level.depotstates[var_0] ) && !maps\mp\_utility::is_true( level.depotstates[var_0].idletype ) )
        level.depotidlestarttime = gettime();
}

depotswitchingtofidget( var_0 )
{

}

depotswitchingtonag( var_0 )
{

}

depotswitchingtoxover( var_0 )
{

}

depotswitchingtobroke( var_0 )
{

}

depotswitchingtocreditreminder( var_0 )
{

}

depotswitchingtonewproduct( var_0 )
{

}

depotswitchingtoeasteregg( var_0 )
{
    level.depotbrokeattempts = 0;
}

depotswitchingtopurchase( var_0 )
{
    if ( level.camparams.camera.depotpos != "crate" )
        thread playertransitiontocrate();

    level.depotstates["purchase"].animname = level.depotstates["purchase"].origanimname;

    if ( var_0 != "idle" )
        level.depotstates["purchase"].animname = undefined;
}

depotswitchingtopurchasewait( var_0 )
{

}

depotswitchingtopurchaseconfirm( var_0 )
{

}

depotpauseended()
{
    foreach ( var_1 in level.depotstates )
    {
        if ( isdefined( var_1.stateinitfunc ) )
            self [[ var_1.stateinitfunc ]]();
    }
}

depotgreetingended()
{
    if ( !depotcanswitchtogreeting( "greeting" ) )
    {
        if ( hasnewproduct() )
            setdynamicdvar( "vlDepotState", "newproduct" );
        else
            setdynamicdvar( "vlDepotState", "idle" );
    }
}

depotidleended()
{
    if ( level.depotstatefinished && gettime() - level.depotstates["idle"].laststatetime > randomfloatrange( level.depotstates["idle"].statemintime, level.depotstates["idle"].statemaxtime ) )
    {
        var_0 = [];
        var_0[var_0.size] = "xover";
        var_0[var_0.size] = "creditreminder";
        var_0[var_0.size] = "nag";
        var_0[var_0.size] = "fidget";

        for ( var_1 = 0; var_1 < var_0.size; var_1++ )
        {
            if ( [[ level.depotstates[var_0[var_1]].canswitchtostatefunc ]]( "idle" ) )
            {
                level.depotstates[var_0[var_1]].nochecknecessary = 1;
                setdynamicdvar( "vlDepotState", var_0[var_1] );
                level.depotstates["idle"].laststatetime = gettime();
                break;
            }
        }
    }
}

depotfidgetended()
{
    if ( level.depotstatefinished )
        setdynamicdvar( "vlDepotState", "idle" );

    level.depotstates["fidget"].laststatetime = gettime();
}

depotnagended()
{
    if ( level.depotstatefinished )
        setdynamicdvar( "vlDepotState", "idle" );

    level.depotstates["nag"].laststatetime = gettime();
}

depotxoverended()
{
    if ( level.depotstatefinished )
        setdynamicdvar( "vlDepotState", "idle" );

    level.depotstates["xover"].laststatetime = gettime();
}

depotbrokeended()
{
    if ( level.depotstatefinished )
        setdynamicdvar( "vlDepotState", "idle" );

    level.depotstates["broke"].laststatetime = gettime();
}

depotcreditreminderended()
{
    if ( level.depotstatefinished )
        setdynamicdvar( "vlDepotState", "idle" );

    level.depotstates["creditreminder"].laststatetime = gettime();
}

depotnewproductended()
{
    sethasnewproduct();

    if ( level.depotstatefinished )
        setdynamicdvar( "vlDepotState", "idle" );
}

depoteastereggended()
{
    if ( level.depotstatefinished )
        setdynamicdvar( "vlDepotState", "idle" );

    level.depotstates["easteregg"].laststatetime = gettime();
}

depotpurchaseended()
{

}

depotpurchasewaitended()
{

}

depotpurchaseconfirmended()
{

}

depotanimstatemachine()
{
    self endon( "leave_depot" );
    level.depotstatefinished = 0;
    var_0 = "";
    var_1 = -1;
    var_2 = "";

    for (;;)
    {
        var_3 = getdvar( "vlDepotState" );
        var_4 = 0;

        if ( var_3 != var_0 || level.depotstatefinished && var_3 != "pause" || var_4 )
        {
            if ( !isdefined( level.depotstates[var_3] ) )
            {
                var_3 = var_0;
                setdynamicdvar( "vlDepotState", var_3 );
                continue;
            }

            if ( var_0 != "" )
            {
                self [[ level.depotstates[var_0].stateendedfunc ]]();
                var_3 = getdvar( "vlDepotState" );
            }

            if ( maps\mp\_utility::is_true( level.depotstates[var_3].nochecknecessary ) || self [[ level.depotstates[var_3].canswitchtostatefunc ]]( var_0 ) )
            {
                level notify( "depot_state_changed" );
                level.depotstates[var_3].nochecknecessary = 0;
                self [[ level.depotstates[var_3].switchingtostatefunc ]]( var_0 );
                level.depotstatefinished = 0;
                var_0 = var_3;
                var_1 = depotplayscene( level.depotstates[var_3].animname, level.depotstates[var_3].animalias, level.depotstates[var_3].animlabel );
            }
        }

        wait 0.05;
    }
}

depotlackeyfidgets()
{
    self endon( "leave_depot" );
    var_0 = 15000;
    var_1 = 30000;
    var_2 = gettime();
    maps\mp\_vl_avatar::hide_avatar( level.depotlackey );

    for (;;)
    {
        if ( gettime() - var_2 > randomfloatrange( var_0, var_1 ) )
        {
            maps\mp\_vl_avatar::show_avatar( level.depotlackey, 0 );
            var_3 = thread agentplaydepotanim( level.depotlackey, "armory_lackey_fidgets" );
            sceneplayanim( level.depotlackey.sceneent, level.depotlackey.sceneent.scriptednode, level.depotprop getanimentryname( "armory_lackey_fidgets_prop", var_3 ) );

            foreach ( var_5 in level.depotlackey.scenemodels )
            {
                if ( var_5 != level.depotlackey.scenemodels[var_3] )
                    var_5 hide();
            }

            level.depotlackey.scenemodels[var_3] show();
            level.depotlackey maps\mp\agents\_scripted_agent_anim_util::waituntilnotetrack( "lackey_fidget", "end", "armory_lackey_fidgets", var_3 );
            level.depotlackey.scenemodels[var_3] hide();
            maps\mp\_vl_avatar::hide_avatar( level.depotlackey );
            var_2 = gettime();
            wait( var_0 / 1000 );
        }

        wait 0.05;
    }
}

depotplayscene( var_0, var_1, var_2 )
{
    var_3 = -1;

    if ( isdefined( var_0 ) )
    {
        var_4 = "armory_" + level.depotscene + "_" + var_0;

        if ( level.depotagent hasanimstate( var_4 ) )
        {
            var_3 = thread agentplaydepotanim( level.depotagent, var_4, var_1, var_2 );

            if ( level.depotscene == "lackey" )
            {
                if ( level.depotlackey hasanimstate( var_4 + "_lackey" ) && level.depotlackey getanimentrycount( var_4 + "_lackey" ) > var_3 )
                {
                    maps\mp\_vl_avatar::show_avatar( level.depotlackey, 0 );
                    thread agentplaydepotanim( level.depotlackey, var_4 + "_lackey", var_3 );
                }
                else
                    maps\mp\_vl_avatar::hide_avatar( level.depotlackey );
            }

            if ( level.depotprop hasanimstate( var_4 + "_prop" ) )
                sceneplayanim( level.depotagent.depotsceneent, level.depotagent.depotsceneent.scriptednode, level.depotprop getanimentryname( var_4 + "_prop", var_3 ) );
        }
    }

    return var_3;
}

agentdelayplayfx()
{
    wait 0.1;
    playfxontag( common_scripts\utility::getfx( "zombie_eye_host_janitor" ), self, "tag_eye" );
}

agentdelayplaysound()
{
    wait 1;
    self playsoundonmovingent( "test_armory_vo" );
}

agentplaydepotanim( var_0, var_1, var_2, var_3 )
{
    var_4 = var_0 setanimstate( var_1, var_2 );

    if ( isdefined( var_3 ) )
        thread agentupdatestateonanimend( var_1, var_4, var_3 );

    return var_4;
}

agentupdatestateonanimend( var_0, var_1, var_2 )
{
    level endon( "depot_state_changed" );
    level.depotagent maps\mp\agents\_scripted_agent_anim_util::waituntilnotetrack( var_2, "end", var_0, var_1 );
    level.depotstatefinished = 1;
}

playertransitiontocrate()
{
    var_0 = level.camparams.camera;
    var_0.depotpos = "crate";
    sceneplayanim( var_0.depotsceneent, var_0.depotsceneent.scriptednode, "h1_vlobby_armory_scene1_cam_zoomin", 1 );

    if ( var_0.depotpos == "crate" )
        sceneplayanim( var_0.depotsceneent, var_0.depotsceneent.scriptednode, "h1_vlobby_armory_scene1_cam_loot_idle" );
}

playertransitiontodealer()
{
    var_0 = level.camparams.camera;
    var_0.depotpos = "dealer";
    sceneplayanim( var_0.depotsceneent, var_0.depotsceneent.scriptednode, "h1_vlobby_armory_scene1_cam_zoomout", 1 );

    if ( var_0.depotpos == "dealer" )
        sceneplayanim( var_0.depotsceneent, var_0.depotsceneent.scriptednode, "h1_vlobby_armory_scene1_cam_idle" );
}

sceneplayanim( var_0, var_1, var_2, var_3 )
{
    var_0 scriptmodelclearanim();
    var_0 scriptmodelplayanimdeltamotionfrompos( var_2, var_1.origin, var_1.angles, "scene_node_anim" );

    if ( maps\mp\_utility::is_true( var_3 ) )
        var_0 waittillmatch( "scene_node_anim", "end" );
}
